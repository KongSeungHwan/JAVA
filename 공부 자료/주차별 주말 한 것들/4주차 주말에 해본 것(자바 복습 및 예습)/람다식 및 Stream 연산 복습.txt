함수형 프로그래밍
기존에는 클래스정의와 객체 생성 이후로 메소드를 호출하여 접근가능했지만
이 과정을 줄여 메소드만을 사용가능하도록 만든 프로그래밍 기능

람다식
자바에서 사용하는 함수형 프로그래밍중 하나!

사용법
interface 정의 및 추상메소드 작성 >> 메소드에서 변수로 생성 초기화 후 구현(함수를 객체처럼 사용)
>> 변수명.추상메소드명(파라미터인자...);이런식으로 호출


stream
실제 입출력 데이터가 표현된 데이터의 이상적인 흐름

특징
재사용 불가능

자료 대상 관계없이 동일한 연산 수행

기존 자료 변경x



스트림 연산

배열 또는 컬렉션에만 사용가능!(Map 불가)

스트림 생성 >> 중간연산 >> 최종연산

lazy 연산 
최종연산까지 거쳐야 연산의 결과가 모두 적용됨.

filter/map

filter 파라미터
boolean이어야함 Predicate임
(원소가 해당 조건에 맞는 원소면 포함)
map 파라미터
새로운 스트림을 생성하는 연산이다.

distinct
이건 원소들의 중복값을 없애주는 역할(값은 다른 값이 들어와도 초기값으로만 존재)

parallel
연산을 병렬로 처리하는 함수

최종 연산

forEach()
Function 유형 함수

count() 
원소의 숫자를 세서  리턴 long값
sum() 
원소들이 숫자면 모두 더하여 총합을 리턴하는 함수


max(),min()
IntStream으로 꼭 변환 해줘야한다.

reduce(ⓐ)
ⓐ BinaryFunction
초기 값은 맨 처음 원소로 진행

reduce(ⓐ,ⓑ)
ⓐ초기 값

ⓑBinaryFunction


flatMap: Array나 Object로 감싸져 있는 모든 원소를 단일 원소 스트림으로 반환.
ex) {{a,b},{c,d},{e,f}} >mapping!> Stream.of(a,b,c,d,e,f)


**collect(Collectors.(메소드)) <<Reference of Method 사용
스트림 원소를 수집하고 원하는 자료구조 형태로 반환하는 기능의 연산
toArray
배열 형식으로 리턴하는 메소드
toCollection()
Collection으로 리턴하는 메소드
toList()
List형식으로 리턴하는 메소드
toSet()
Set 형식으로 리턴하는 메소드
toMap()
Map 형식으로 리턴하는 메소드

toMap(ⓐ,ⓑ)
ⓐFunction 형식 리턴값이 key가 된다

ⓑFunction 형식 리턴값이 value가 된다.

toMap(ⓐ,ⓑ,ⓒ)
ⓐFunction 형식 리턴값이 key가 된다

ⓑFunction 형식 리턴값이 value가 된다.

ⓒBinaryFunction 형식 key가 중복되는 두 value 값을 인자로 어떻게 처리할 것인지 리턴

joining() 문자열 형태의 원소들을 하나의 문자열로 이어붙여 리턴 리턴 값 문자열
파라미터가 있다면 그것은 구분자!

partitioningBy(Predicate)
2분할 메소드 map 리턴
groupingBy보다 출력속도 높음

groupingBy(Predicate)
n분할 메소드 map리턴

counting(Function)
count최종연산과 동일 리턴 값도 동일하다.(long)

maxBy()

minBy()

summing+숫자 자료형(Function)
더한 값을 뒤에 붙는 숫자 자료형을 Optional(자료형)으로 리턴
averaging+숫자 자료형(Function)
평균 값을 뒤에 붙는 숫자 자료형을 Optional(자료형)으로 리턴
