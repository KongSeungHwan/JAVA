\b 문자와 공백 사이의 문자
\d 숫자
\s 공백(줄바꿈,탭,' ')
\w 알파벳,숫자,_인 문자
\t 탭
각 역슬래시 뒤의 문자가 대문자면 부정!

[ ]OR의 개념
ex)
[Hh]ungry >> hungry,Hungry
[1234567890] >> 숫자가 들어간 문자를 찾고 싶다는 의미이다.

[A-Z] 영어 대문자
[a-z] 영어 소문자
[0-9] 숫자
[가-힣] 한글

다른 표현 
[a-c] == a|b|c

[]내부의 ^ >> 부정
ex)
[^0-9]숫자가 아닌 문자

Anchor

^[a-z]$
행의 시작 ^
행의 끝 $


{} 반복
*  0개 이상 문자를 포함
+ 1개 이상 문자를 포함
? 0개 또는 1개의 문자를 포함

{n} n개의 문자로 구성된 문자열
{n,} n개 이상의 문자로 구성된 문자열
{n,m} n~m개 범위안의 문자로 구성된 문자열







그룹 캡쳐(문자열 중 일부분 가져와 그룹화 시키는 것)
() 그룹 및 캡쳐 

기본적으로 group()메소드는 원본 리턴
group(0) <<원본
group(1) << 캡쳐한 첫 번째 문자열
group(2) << 캡쳐한 두 번째 문자열
method overloading
() 그룹 및 캡처
(?:) 찾지만 그룹에 포함 안됨
ex) 
Pattern.compile("1000원 2000원 3000원");
find() <<hasNext와 비슷한 메소드 단 포인터 증가 효과도 가지고 있음
group(1) 1000
group(2) 2000
group(3) 3000
(?=(문자)) 전방 부터 문자가 있기 전까지 탐색

(?<=(문자)) 후방 부터 문자가 있기 전까지 탐색


Flag

g 첫 매칭 후 끝내지 않으며 계속 탐색
m 줄 각각 매칭
i 대소문자 구분 무시 후 매칭


역참조
(정규표현식1)(정규표현식2) \1\2
(정규표현식1) == \1
(정규표현식2) == \2

String 클래스의 정규식 메소드
문자열.matches(regex)
문자열.replaceAll(regex,바꿀 문자열)
문자열.split(regex)