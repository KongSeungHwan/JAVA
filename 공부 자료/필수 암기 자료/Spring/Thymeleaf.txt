Thymeleaf
Thymeleaf는 기존의 JSP나 Velocity와 같은 템플릿 엔진과 
비교하여 런타임 시점의 높은 성능, HTML 파일 실행 가능, 
유연한 구문 등 다양한 이점이 존재

동적인 컨텐츠 생성 가능


xmlns >>xml namespace!

<html xmlns:th="http://www.thymeleaf.org">
html 태그에 작성
th라는 접두어로 
"http://www.thymeleaf.org" uri에 정의된 요소와 속성 
사용가능!


Controller 단에서 가져온 값으로 동적인 컨텐츠 만드는 것이 주 목적!
(형식은 대충 jstl사용방식과 유사하다고 생각한다.)

th:text 속성
HTML 태그 안의 텍스트를 
Thymeleaf 템플릿 엔진이 실행될 때 
동적으로 변경할 수 있다.
만일 속성이 기입된 태그 내에 텍스트가 존재한다면 덮어 써진다.

기존 텍스트와 같이 쓰고 싶다면?

ex)
<td th:text="${itemDto.itemNm}+'의 '+${itemDto.itemDetail}"></td>
이런 식으로 따옴표를 달리 사용하여 가능하다.
앞의 컨트롤러에서 전달 받은 itemDto객체의 itemNm과 itemDetail과 텍스트와 같이 표기할 시에 사용법이다.


th:if 속성은 조건문을 사용하여 
태그를 동적으로 출력하거나 출력하지 않을 수 있다.

ex)
<p th:if="${showMessage}">Hello Thymeleaf!</p>
해당 showMessage 값이 true일 경우만 보여줌!
false면 보여주지 않음



th:each 속성은 반복문을 사용하여 여러 개의 태그를 동적으로 출력가능
뒤에 붙는 status는 상태 값을 불러올 시 사용하는 객체이다.(jstl과 동일)

ex)
<tr th:each="itemDto, status : ${itemDtoList}">
        <td th:text="${status.index}"></td>
        <td th:text="${itemDto.itemNm}"></td>
        <td th:text="${itemDto.itemDetail}"></td>
        <td th:text="${itemDto.price}"></td>
        <td th:text="${itemDto.regTime}"></td>
</tr>

th:href
Thymeleaf에서 링크를 처리하는 데 사용되는 속성이다.
절대경로 방법,상대경로 방법 입맛대로 사용하면 된다.


절대경로 방식


상대경로 방식
<a th:href="@{/users/{userId}/details(userId=${user.id})}">User Details</a>
 URL 패턴을 나타냅니다. {userId} 부분은 URL 경로에 변수로 사용되며, {} 중괄호 안에 해당 변수명을 적어준다
 userId=${user.id} 부분은 변수 값을 지정하면 끝!


<a th:href="@{https://www.example.com/contact}">Contact Us</a>







기초 용어
XHTML:
XHTML(Extensible Hypertext Markup Language)은 
HTML을 XML 기반으로 재정의한 언어로, 
웹 페이지의 구조와 내용을 정의하기 위한 마크업 언어다.
