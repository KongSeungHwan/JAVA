Spring 기초 용어

Spring vs SpringBoot
Spring
엔터프라이즈용 Java 애플리케이션 개발을 편하게 할 수 있게 해주는 
오픈소스 경량급 애플리케이션 프레임워크
(개발자가 작성해야할 코드 수가 매우 적음)
SpringBoot
스프링을 더 쉽게 이용하기 위한 도구로 알면 된다.

디렉터리 구조
static 디렉터리
정적인 코드나 파일들을 저장하는 디렉터리(css,js,img파일 등)

templates 디렉터리

html 문서들을 저장하는 디렉터리이며 즉 뷰 부분을 저장하는 
디렉터리



Annotation
정의 
>> 클래스 안에 어노테이션 배치 
>> Reflection 추가정보 획득




@Autowired: 의존성 자동 주입(Dependency Injection)을 위해 
사용됩니다.


@RequestMapping: 요청 URL과 메소드를 매핑할 때 사용됩니다.

매핑 방식
@RequestMapping( value="매핑 시킬 url 패턴", method = RequestMethod.(GET/POST) )
(접근 제어자) (자료형) (메소드명) (Model model) {
    model.addAttribute("data", data);

    return "(이동할 다음 url)"; 
//렌더링이 되어있나 주의! application.properties부분에
// 접두어(상위 디렉터리 경로) 접미사(.jsp) 있나 확인
}

ex)
@GetMapping("/test")
public String test(Model model) {
    model.addAttribute("data", data);
    return "/test/data";
}
//@getMapping("")은 
//@RequestMapping(value = "", method = RequestMethod.GET)을 대신하는 코드


@Controller: 웹 애플리케이션에서 Controller 역할을 하는 
클래스임을 명시


@Service: 비즈니스 로직이 작성된 클래스임을 명시



@Data 기본적으로 DTO에 작성하는 어노테이션으로 
필드 선언과 Getter/Setter 메서드, equals(), hashCode(), toString() 메서드 등을 일일이 작성하는 수고를 덜어줄 수 있다.



@Repository: DAO(Data Access Object) 클래스임을 명시


@Mapper: Mapper 인터페이스로 명시



@ResponseBody: 컨트롤러의 메소드가 JSON, XML 등의 
데이터를 반환할 때 사용됩니다.(API 활용 가능!)









@PathVariable: URL 경로에서 변수 값을 추출할 때 
사용됩니다.
@RequestParam: HTTP 요청 파라미터를 메소드의 
파라미터로 전달받을 때 사용됩니다.
@ModelAttribute: HTTP 요청 파라미터를 객체에 
바인딩(값 할당)할 때 사용됩니다.
@Transactional: 트랜잭션을 적용할 때 사용됩니다.
@Configuration: 스프링 설정 파일임을 명시합니다.
@Component: 컴포넌트 스캔(Component Scanning) 대상임을 
명시합니다.
@Scope: 빈(Bean)의 스코프를 지정합니다.
@Qualifier: 의존성 주입 시 빈(Bean)을 구분하기 위해 
사용됩니다.
@Value: 프로퍼티 값을 주입받을 때 사용됩니다.
@Profile: 프로파일(Profile)을 지정합니다.
@Scheduled: 주기적으로 실행될 작업을 지정합니다.
@EnableWebSecurity:
@EnableScheduling: 스케줄링 기능을 사용하도록 설정합니다.
@EnableAsync: 비동기 처리 기능을 사용하도록 설정합니다.
@RestController: RESTful 웹 서비스에서 컨트롤러 역할을 
하는 클래스임을 명시합니다.


Bean: 스프링 컨테이너에 의해 관리되는 
재사용 가능한 소프트웨어
Controller :사용자와 응용 프로그램 간의 중재자 역할을 하며
 ASP.NET 페이지에서 트리거 된 비즈니스 관련 작업을 처리하는
 프로그램 구성 요소
Component Scan:스프링이 스프링 빈(Bean)으로 등록될 준비가
 된 클래스들을 스캔하여 빈(Bean)으로 등록해주는 과정



JPA(Java Persistence API)
자바 측의 ORM 기술 표준

**따로 로직 내에서 SQL문을 짤 필요 없음
**단순한 SQL문 필요 시에는 JPA유용하지만
복잡하면 효율이 떨어진다.

ORM(Object Relational Mapping)
객체와 DB의 관계를 매핑해주는 도구






기본적인 Spring 프로젝트 루틴(Gradle,Maven)

1.필요 의존성 추가(검토) 
프로젝트 자체를 만들 시에도 의존성 추가가 가능하나 만든 이후에 추가할 시 또는 원하는 의존성이 없을 시!

Maven Repository에서 검색하면 나온다.
<<Spring boot 사용시 버전은 따로 기입해주지 않아도 알아서 매핑시켜준다.(스프링 부트 장점)

Spring Web(웹 어플리케이션을 만들 시 필수)
, OracleDB/MySQL 드라이버 관련
,( LOMBOK) project lombok 의존성 추가(DTO관련 메소드 만들기 편함(ex @Data,@Getter,@Setter 사용가능))
,(JPA) DATA-JPA,QueryDSL-JPA,QueryDSL-APT(+apt plug-in도 추가해줘야 한다. 검색 필요..) 의존성 추가+따로 추가
,(Spring Security) spring-boot-starter-security 의존성 추가 (**인증과 인가를 처리하는 데 사용되는 프레임워크)
,(Spring Security Test) spring-security-test 의존성 추가  (Spring Security Test를 사용하여 보안 요건을 준수하는지 확인할 수 있음)
,(Dev-tool)이름 그대로 dev-tool 의존성 추가 (개발 변동사항 발생 시 다시시작하지 않고 바로 적용 가능한 의존성)
,(Thymeleaf) spring boot starter thymeleaf 의존성 추가(spring에서 주로 사용하는 템플릿 엔진)
,(Thymeleaf-layout-dialect) Thymeleaf-layout-dialect 의존성 추가+따로 추가
(모든 페이지에서 공통으로 사용할 헤더,푸터를 정의하여 다른 페이지에서도 렌더링 되도록 가능한 의존성 코드 수 감소 용이)
,(Validation) spring-boot-starter-validation 의존성 추가(유효성 검사 관련 어노테이션 사용 용이 @NotEmpty @NotBlank 등...)
,(thymeleaf Extras Springsecurity5) thymeleaf-extras-springsecurity5 의존성 추가(Thymeleaf와 Spring Security와 같이 사용시에 추가)+따로 추가
,(H2Database) h2 database Engine 의존성 추가
+)H2는 인메모리 데이터베이스 중 하나며, 스프링 애플리케이션을 개발하면서 DB를 사용해야 할 때 테스트용으로 자주 사용
실제 운영엔 필요x




2.application.properties 파일을 작성( 필요한 설정 값을 입력 key=value 형식으로)

resources 디렉터리 내에 존재하며 보통 작성하는 설정 값들은

server.port= #(연결할 포트번호)

#mysql이면 이런 식
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/shop?serverTimezone=UTC
#oracle이면 이런 식
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe

#이후
spring.datasource.username=(DB 계정 이름)
spring.datasource.password=(계정 비번)

#hibernate(JPA 구현체) 사용시에 수행되는 쿼리문 출력 show_sql, 출력시에 들여쓰기 적용시켜 출력 format_sql, 로그 출력 descriptor.sql
spring.jpa.properties.hibernate.show_sql=true 
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql=trace

#DB관리 전략 보통 개발 시에는 CREATE,UPDATE 사용하지만 운영 시에는 NONE을 사용
#VALIDATE는 스테이지에 올라가기 전에 프로덕션에서 발생하는 오류를 검출 가능(개발 시 적용할 것을 추천)
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

#DEV TOOL 적용 프로퍼티 (개발 시에만 TRUE로 하며 운영시에는 FALSE로 해놔야 함)
spring.devtools.livereload.enabled=true

(기본 설정 완료)


3.개발 루틴
	커스텀 로그인 페이지를 만든다.
	DTO, 엔티티 클래스 등을 작성하고, Lombok 어노테이션을 사용해 필드와 메소드를 자동으로 생성한다.
	Repository 인터페이스를 작성하고, JPA 메소드를 사용해 데이터베이스를 조작한다.
	Service 클래스를 작성하고, Repository를 주입받아 비즈니스 로직을 구현한다.
	Controller 클래스를 작성하고, Service를 주입받아 요청을 처리하고 응답을 반환한다.(매핑)










용어 정리
Dependency(의존성):
파라미터나 리턴값 또는 지역변수 등으로 다른 객체를 
참조하는 것

AOP(Aspect Oriented Programming) 
(관점 지향 프로그래밍):
OOP를 더욱 발전시키기 위한 개념이다. 
하나의 소프트웨어가 하나의 거대한 OOP로써 설계, 
프로그래밍 되었다면 이것을 각 기능별로 모듈화 해서 
분리를 시키는 개념

Core Concern(핵심 관심): 각 서비스의 핵심 비즈니스 로직

Crosscut Concern(횡단 관심): 공통 모듈

JointPoint: Crosscut Concern(횡단 관심)을 삽입할 시점

PointCut: 어떤 클래스의 함수에 삽입할 건지 결정, 삽입할 위치

Aspect: JointPoint+ PointCut

Weaving Aspect+Advice 위빙을 통해 지정된 객체를 새 Proxy 객체로 생성한다

Proxy: 
클라이언트가 자신을 통해서 
다른 네트워크 서비스에 간접적으로 
접속할 수 있게 해 주는 컴퓨터 시스템이나 
응용 프로그램

Crosscut Concern이 Core Concern에서 직접 실행되지 않고 Proxy(대리인)을 생성해 실행된다.

Logging
시스템을 작동할 때 시스템의 작동상태 기록, 
보존, 이용자의 습성조사 및 시스템 동작의 분석 등을 
하기 위해 작동 중의 각종 정보를 기록하여 둘 필요가 있다. 
이 기록을 만드는 것을 로깅

IOC(Inversion of Control): 제어의 역전
개발자가 작성한 객체나 메서드의 제어를 개발자가 아니라 
외부에 위임하는 설계 원칙을 제어의 역전

클래스 내부의 객체 생성 -> 
의존성 객체의 메소드 호출이 아닌, 
스프링에게 제어를 위임하여 스프링이 만든 객체를 주입 
-> 의존성 객체의 메소드 호출

Bean : 제어의 역전 방식으로 관리되는 객체

Application Context: 빈(Bean) 팩토리를 확장한 IoC Container

Bean Factory: 빈을 생성하고 의존관계를 설정하는 기능을 
담당하는 가장 기본적인 IoC 컨테이너이자 클래스

Dependency Injection
(의존성 주입)
프로그램 디자인이 결합도를 느슨하게 되도록하고 
의존관계 역전 원칙과 단일 책임 원칙을 따르도록 
클라이언트의 생성에 대한 의존성을 
클라이언트의 행위로부터 분리

Business Logic:
(비즈니스 로직)
비지니스 로직은 유저 눈엔 보이진 않지만, 유저가 바라는 결과물을 올바르게 도출하기 위한 코드


