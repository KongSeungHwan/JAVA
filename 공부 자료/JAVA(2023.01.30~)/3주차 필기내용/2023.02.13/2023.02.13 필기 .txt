금욜에 짠 본 숫자 야구게임/주말에 짠 숫자 야구게임 피드백

나는 한 클래스에다가 메소드도 다 static으로 했는데 강사님은 기능별로

클래스로 빼서 따로 관리를 하심. 

정처기 때 배운 모듈 단위 구현이 이런건가 싶기도 했음.(통합 테스트 part)

게다가 나는 시간 복잡도 공간 복잡도 이런것은 고려하지도 않고 만들었는데

다 고려해서 만든.. 가장 이상적인 코드같네.. 역시 10년 짬밥차이구만...

+) 숫자 0 빼야겠다..

(동일 숫자 센 전체 수) - (strike 수) ==(ball 수)

어차피 내가 한것도 변수 2개(strike)써서 직접 셌고,


1.일단 처음 입력값을 받을 때는 문자열(동일) >>캐스팅

2. strike, ball 카운트 수 구하기
난 둘 다 따로 세서 증감연산자로 올리기만 했음.

전체 카운트 변수 1개,ball 카운트 변수 1개..
어차피 2개고 카운트 해야 함.(초기화 수와 연산 횟수는 동일하다고 봄 다만 알고리즘이 다를 뿐)



차이가 났던 점..
1. 나는 선택 정렬 비교방식과 같은 방식으로 중복오류를 처리했는데 강사님은 contain 함수를 써서 바로 중복오류를 잡아냈다.

(ArrayList 자료형).contains(호출한 객체와 같은 자료형)
contains 함수가 시간 복잡도는 O(1)이었음
일단은 내 것은 시간 복잡도 O(n^2)...
(고치자 이건)

2. 기능 구현(+레벨 추가)
레벨마다 어떤 차이점이 있으려나

3. matches함수 "\\d {}" >>정규식? 용법 (알아서 입력 오류를 알아서 체크해준다.)(O(n)의 시간 복잡도)
하지만 나는 선택정렬과 같은 비교방식을 이용하여 O(n^2)이다. 즉 matches 함수를 쓰는게 더 효율적이다.
 
처음 알았음
확실히 따로 함수 만들지 않아도 이것만 쓰면 값이 유효한지 알아볼 수 있다.(코드 수 감소) 

4. 전체로 감싼 무한 루프를 그냥 기존 for문 사용해서 초기화식에 썼던 변수를 증가시키면서 10에서 뺀 숫자로
기회를 나타내면 된다.(무한루프가 의미 없어짐)

5. 기능대로 분리를 못했다..
중복값 포함된 값,잘못된 값을 같이 처리함..(분리 하지 못했다.)

6. 게임이 끝날 시에 게임 재시작 하겠냐 물어보는 것


느낀 점: 나는 다른 클래스에 할 필요 없다고 마냥 생각했는데 확실히 기능 추가나, 오류를 잡을 시 상황에 따라 전체 코드를
갈아 엎을 수 있는 번거로움이 존재한다는 것을 배웠다. 그래서 처음 코드를 구성할 때 기능단위로 클래스를 나눠서
해야겠다는 생각이 들었다. 난 아직도 멀었다..


할 것: 숫자 야구게임 ver.2(+기능 추가) 스트라이크 수는 다른 배열에 저장 후



책 순서대로 예습 Collection 했는데 무슨 열거체..야



Enum
열거형 == 상수들의 집합

들었을 때 든 생각
Iterator 이런건가?
막 Hashmap 이런 Collection은 key 값이 배열 같이 가지런하지 않으면 반복문으로 꺼내올 수 없다.
근데 열거체를 사용하면 hasNext()(다음 원소가 있을 때까지 true 없으면 false리턴)이것을 while 조건문에 넣어 
반복시키고 다음 원소를 반환하는 next() 함수를 써서 해당 원소에 대한 데이터에 순차적으로 접근 가능하다.

syntax

질문거리

enum Type{
	WALKING("워킹") , TRACKING("트래킹"), HIKING("하이킹"), RUNNING("러닝"); //상수들이네
!

	final String name;
	
	private Type(String name){
		this.name = name;
	}
	public String getName() {
		return name;
	}
}



Collection Framework

다양한 데이터를 효율적으로 처리하기 위한 수단? List,Map,Set,Table의 인터페이스가 있다.

ex) ArrayList << List의 인터페이스를 상속 받음 HashMap << Map의 인터페이스를 상속 받음

제네릭 
타입을 파라미터로 가지는 클래스나 인터페이스


ex) <> ArrayList클래스도 제네릭을 쓴다.(라이브러리 가보면 안다)


<>사이에 어떤 글자가 와도 된다.
A~Z a~z

그냥 의미 부여일 뿐 T는 Type의 T  E는  Element의 E


extends를 써서 타입 범위 지정도 가능

<A extends B>
자신도 오기 가능하고 자식 자료형 또한 올 수 있음


제네릭 메소드

접근제어자 (final,static 란) 반환 자료형 메소드명 (){
}


오버로딩이 안된다. 컴파일러가 제너릭 타입은 모두 하나로 묶어서 글자와 관계없이 같은 타입 취급을 한다.

ex)
public <x> x genericMethod(x value){
		 return value;	
	}
	 <y> y genericMethod(y value) {  //오버로딩이 안된다. 제네릭 타입(미지정 타입)은 하나로 판단
		 return value;
	 }
(X)

호출법
static을 붙여줘야 한다.
클래스 이름.제네릭메소드이름(매개변수);



와일드 카드
어떠한 타입이 될 수 있다는 의미

<? extends B>
B자료형 이거나 B자료형의 하한 자료형 해당

<? super B>
B타입의 상한 자료형만 올 수 있음.

Comparable Interface : 비교하는 메소드 모두 포함되어있는 인터페이스



**public은 class 접근제어자가  class 파일 내에서 1번 밖에 적용이 안된다.

class WildClass<T extends Comparable<T>>{}//인터페이스도 extends 쓰나?
class WildClass2<T extends Comparable<? super T>>{}

class Person{}
class Student implements Comparable<Person>{
	public int compareTo(Person o) {return 0;}
}
class Student2 implements Comparable<Student2>{
	public int compareTo(Student2 o) {return 0;}
}
public class WildCardRun {

	public static void main(String[] args) {
		//WildClass<Student> a = new WildClass<>();
		WildClass<Student2> b = new WildClass<>();
		WildClass2<Student> c = new WildClass2<>();
	}
}

어려웠던 문제
위의 메인 메소드 주석 처리한 첫 줄 주석을 제거하면 왜 오류가 나는가?

1번 실행문만 보자면
WildClass 정의를 보면 오류가 나는게 당연한게
주석처리 해놓은 메인메소드 첫번째 줄 실행문만 보자면
T대신에 Student를 넣었다고 생각하면 된다.
WildClass<ⓐStudent extends Comparable <Student>>
이런식으로 된다. 여기서 집중해서 봐야 할 것이 a부분만 보자!
Student extends Comparable<Student> 인데
밑 부분에 정의된 class Student (extends Person) implements Comparable<Person>이다.
근데 Wild 클래스 제네릭으로 올수 있는것은 Comparable <Student>를 상속받은 Student클래스를 말하는 건데
밑에 정의된 Student클래스는 Comparable<Person>을 상속 받고 있다.
고로 못 들어감. 오류!
결론: 인터페이스 상속차이때문에 못 들어가는 것이다.


Collection

다양한 데이터를 처리하기 위한 제공되는 표준화된 프레임워크


자료구조도 여기에 해당





선형 자료구조

ArrayList(그냥 효율적인 배열)

LinkedList(노드와 노드를 링크라는 필드를 이용해 잇는 리스트) 

Vector
쓰레드 호환성때문에 쓰지 걍 ArrayList쓰는게 나음 

그냥 배열 형태

Queue

FIFO(First In First Out)

Enqueue

Dequeue

Stack

LIFO(Last In First Out)

push(); pop();

peek();

Deque(Stack+Queue)
스택과 큐를 합친 형태





비선형 자료구조

트리(Tree)
노드와 노드의 연결이 사이클이 없는 자료구조 

그래프(Graph)
노드와 노드의 연결이 사이클이 있는 자료구조



Interface

List

원소를 줄줄이 저장

Set
저장하되, 중복 못함



Map
key value를 값으로 갖는다
key를 index로 씀 그래서 배열처럼 for문 사용해서 순차적으로는 접근 못함




클래스처럼 보이게 하는 상수
서로 관련있는 상수들끼리 모아 상수들을 정의하는것
enum 클래스 형을 기반으로 한 클래스형 선언


Object클래스의 toString() 오버라이딩 시
오버라이딩한 클래스를 가지고 객체를 생성 후 저장한 변수명을 출력문으로 출력할 시 
.toString()이 뒤에 자동으로 붙는다고 한다.
class Car{
	public String toString(){
		System.out.println("나의 이름은")
		return "자동차";
	}
}
class CarTest{
	public static void main(String[] args){
		Car car = new Car();
		System.out.println(car);
		System.out.println("----");
		System.out.println(car.toString());
	}
}
메인 메소드 실행 결과
나의 이름은
자동차
----
나의 이름은
자동차


결과가 이렇게 나온다.(오늘 처음 알았다..)


질문

열거체 생성 시에 왜 정의가 되지 않은 생성자를 호출할 수 있는 거지?

컴퓨터는 보통 코드를 위에서 아래로 왼쪽에서 오른쪽으로 읽는데

만일 !까지 읽었다면 생성자가 없는데 호출한 꼴이다.

생성자메소드를 호출한다음 정의한 꼴이다.


바보 같은 질문이었음 동작원리를 제대로 파악 못한 것을 의미(클래스 하나 읽는 것을 메인클래스와 똑같이 봄..)

클래스나 열거체를 만든다고 해서 그것을 먼저 컴퓨터가 코드를 읽는 것이 아님.
객체 생성 시에 객체 안의 코드를 읽는 순서
제일 먼저 읽는것: 생성자 메소드
그 다음에 읽는 것: 나머지 클래스 안의 필드 메소드

용어 정리

socket: 네트워크 상에서 돌아가는 두 개의 프로그램 간 양방향 통신의 하나의 엔드 포인트

Regular Expresstion:컴퓨터 과학의 정규언어로부터 유래한 것으로 특정한 규칙을 가진 문자열의 집합을
 표현하기 위해 쓰이는 형식언어

Checksum: 오류 잡는 코드로 기억하는데..

열거형(또는 열거형 형식):기본 정수 숫자 형식의 명명된 상수 집합에 의해 정의되는 값 형식

Refactoring: 개발자들이 개발을 보다 더 쉽게 하기 위해 코드들을 재정의하는 작업을 의미