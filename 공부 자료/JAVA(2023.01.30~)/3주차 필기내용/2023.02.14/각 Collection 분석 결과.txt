생성자란에 올 수 있는 파라미터
toArray() >>자료구조에서 배열형태로 바꾸는 메소드, 즉 리턴값이 배열이다.
같은 자료형이어야하는 조건이 붙는다.


List클래스의 static형 제네릭 메소드
List.of() asList와 파라미터 형태는 같다.


Arrays클래스의 static형 제네릭 메소드
asList: 빈 리스트를 생성하여 각각 초기화하는 번거로움을 없애기 위해 만들어진 메소드
ex)
LinkedList<Integer> l = new LinkedList<>(Arrays.asList(5,6,7,8));
위의 예시 처럼 각각 자료형에 맞는 것들을 기입하면 생성과 동시에 원소들을 초기화 가능하다.
toString() >>Object 클래스 오버로딩한 메소드
[ 원소1,원소2.. ] 이런 형식의 문자열을 리턴하는 함수로 오버로딩함.

List 분석

ArrayList 메소드 분석 결과
add() list의 원소를 추가하는 함수다.
Collections.sort() 순서대로 정렬
Collections.sort(Collection상속 자료구조, Collections.reverseOrder()); 역순으로 정렬
get() 파라미터로 인덱스 값을 넣으면 인덱스에 해당하는 값을 리턴
remove():파라미터로 인덱스를 기입하거나 값을 기입하면 없앤다
(ⓐ만일 같은 값이 존재하면 인덱스 기준 제일 뒤의 값이 제거됨.)
contains():해당 값이 존재하는지 확인하는 메소드(true/false)
(ⓑ문자열은 진짜 부분 부분 다있는지 확인하나 ArrayList쪽의 contains는 값 정확하게 쳐야 true로 나옴.)
addAll(자료구조 변수명):같은 List인터페이스를 상속받는 자료구조에 깊은 복사를 이행할 때 사용하는 메소드 

LinkedList 메소드 분석 결과
getFirst() 첫번째 원소의 값을 리턴한다
getLast() 마지막 원소의 값을 리턴한다
lastIndexOf() 마지막 원소의 인덱스값을 리턴한다.

Iterator 객체 분석결과
Iterator도 제네릭 타입의 클래스로 자료구조에 저장되어있는 원소들을 순차적으로 불러올 수 있게 하는 객체다.
(데이터 베이스의 커서와 동작 원리는 유사)
Collection은 인터페이스에 iterator() 메소드가 있으며 Iterator객체로 받을때는 제네릭을
동일한 자료형으로 통일시켜야 객체로 받는 것이 가능하다.
hasNext() 0부터 시작했을 때 다음 차례의 원소가 있는지 없는지 여부를 true/false로 리턴하는 함수
next() 0부터 시작했을때 다음 차례의 원소를 리턴하는 함수(받는 변수의 자료형을 통일시켜야 한다.)
descendingIterator() 해당 자료구조를 역순으로 불러온다.

Vector 메소드 분석 결과
add()리턴하는 메소드
addElement() 리턴 안하는 메소드
setElementAt(값,인덱스) 해당 인덱스의 값을 수정하는 메소드 (리턴x)
remove() 값이나 인덱스 하나를 파라미터에 넣으면 해당
(ⓒcontains와 동일하게 값도 정확하게 기입해야 한다.)
indexOf() 파라미터에는 원소에 해당하는 값이 와야한다. 해당 값의 인덱스를 리턴하는 메소드
elementAt() 파라미터에는 인덱스가오고 해당 인덱스에 해당하는 값을 리턴하는 메소드
get(인덱스)
set(인덱스, 값) 리턴

Set 분석
add() 원소 추가
Set도 향상된 for문 사용가능

TreeSet은 
SortedSet<String> sset = animalTSet.headSet("Z"); //해당 값보다 작은 값의 객체들을 반환(순서x)
NavigableSet<String> nset = animalTSet.headSet("Z",true); //해당 값보다 작은 값의 객체들을 동일값도 포함해서 반환
Iterator 로 저 변수들을 받아 순차적으로 리턴

만일 객체를 저장하는 TreeSet이면 Iterator를 이용하여 해당 객체를 참조형 변수에 저장하면서
비교하고 비교했을때 해당 값이 맞으면 remove메소드를 사용하여 해당 원소를 없앤다.

comareTo 정수 값으로 나옴 대소비교(정렬에 용이함. 역으로 하려면 -1을 곱하면 역순이 된다.)






 






































+)String.format() 메소드는 C언어의 printf 함수와 같은 용도로 사용되며, 
출력 포맷을 하나의 문자열로 만들수 있기 때문에 불필요한 문자열 결합도 필요없고, 
가독성도 높아진다.