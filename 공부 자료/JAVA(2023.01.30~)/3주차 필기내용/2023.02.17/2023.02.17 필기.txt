Collection(Collection 인터페이스는 아래의 인터페이스로 상속해주고 있는 형태이다.
List, Set, Map)

ⓐList

ArrayList
LinkedList
Vector(뒤에 List가 안붙는다고 상속 안받는게 아님. 클래스 뒤져보니까 상속 받고 있는것 확인함)

순서가 있고 중복 가능하다.

ⓑSet
HashSet
LinkedHashSet
TreeSet

Set은 순서가 없으며 중복 불가능하다.

ⓒMap
HashMap
LinkedHashMap
HashTable
TreeMap

Key를 기점으로 중복 불가능하다.(key로만 value에 접근가능한 형태)

순서는 없음.

단 기본적인 Map은 Entry 형식으로 되어 있으며 key를 이용해
 값만 접근 가능(key는 접근 불가) 그래서 엔트리 셋으로 빼준다음
Set의 iterator() 메소드를 사용하여 Iterator객체를 리턴 후 Iterator 자료형의 변수에 저장 후
순차적으로 접근해야만 한다.(이과정까지 해야 key값들에 접근 가능하다.)
HashMap<String, Integer> ha = new HashMap<>();

Set<Map.Entry<String,Integer>> set = ha.entrySet();

Iterator<Entry<String,Integer>> it = set.iterator();

while(it.hasNext()){
	next()로 다음 iterator 객체를 받고 접근하는 형태(key값으로 접근 가능)
}








람다식

함수형 프로그래밍

람다식 이용 시 꼭 해야할 사항
 인터페이스 정의 >> 해당 인터페이스로 객체 생성>>메인메소드안에서 추상메소드 구현
객체명.메소드명() 이런식으로 호출(파라미터 넣어도 된다.)

동작원리
익명클래스 생성 >>

보통 클래스 만들고 클래스 안에 메소드를 정의한 후 또 클래스를 이용하여 객체를 만들고 메소드를 호출하는데
이를 편의성을 위해 만들어진 기능

( x , y ) -> x,y에 관한 연산
(파라미터 목록) -> x,y에 관한 수식

public class Prac{
	public interface Number{
		int max(int num1, int num2);
	}//함수형 인터페이스
	public static void main(String[] args) {
		Number a = (x,y) -> x+y; 
		System.out.println(a.max(1, 2));
	}//함수를 메인메소드에서 호출(익명 함수)
}


알아보기
리스트들은 공간 차지시 몇byte일까(공간 복잡도)


용어정리

와일드 카드:
파일을 지정할 때, 구체적인 이름 대신에 여러 파일을 동시에 지정할 목적으로 사용하는 특수 기호
(약간 일반화를 의미하는 개념 표기는 "?"로 한다.)

static 형 제네릭 메소드:
클래스명.해당 메소드 이름() >>static형 제네릭 메소드 호출법 
(ex) Arrays.asList(), List.of(),Collection.sort())를 예시로 들 수 있다.