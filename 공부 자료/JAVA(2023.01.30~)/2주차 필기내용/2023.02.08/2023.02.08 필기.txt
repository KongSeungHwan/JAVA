클래스의 다형성, 재사용성

하나의 코드가 여러가지 자료형으로 구현되어 실행

다형성을 적용하는 기능


오버로딩
한 클래스 내에서 메소드를 다른 이름으로 정의할 수 있는 기능
(각각의 같은 이름의 메소드는 매개변수의 개수, 자료형, 순서로 구분)

오버라이딩
부모 클래스에서 정의한 메소드를 자식 클래스에서 재정의 할 수 있는 기능

상속
상위 클래스에서 정의한 필드나 메소드를 하위 클래스에서 호출 가능한 기능(여러번 X 출처의 모호성 때문)

형변환(Casting)
쓰던 자료형을 다른 자료형으로 바꾸는 기능

묵시적 형변환
(작은범위에서 큰 범위로 변환하는 것은 가능, 허나 큰 범위에서 작은 범위 형변환은 불가능)
byte >>short >>long >>float >>double

+)ASCII Code   char >>int

명시적 형변환(강제 캐스팅)
(자료형)(값 또는 변수) ex) (int)(3.0)


Up Casting
자식 클래스의 객체가 부모 클래스 타입으로 형변환 되는 것을 말한다.

Down Casting
업 캐스팅의 역

A instanceof B (A는 객체 B는 클래스)
A객체의 자료형이 B 타입인가를 boolean값 리턴

가상 메소드
해당 인스턴스의 메서드가 호출되는 기술
(+ 아무리 오버라이딩하든지 어떤 클래스로 생성하였냐에 따라 자식클래스에서 오버라이딩 했어도 
부모클래스로 객체를 생성했다면 부모 클래스의 메소드가 호출되는 기능?)


추상 클래스

메소드 중에서는 구현이 되지 않은 메소드들 또한 존재한다. 이는 자료형이나 매개변수까지는 있으나, 중괄호 부분 즉,
명령 구문 쪽이 비어있는 메소드를 추상메소드라고 하고 이를 포함하는 클래스를 추상 클래스라고 한다.

keyword abstract

오로지 상속만을 하기위한 클래스(생성 못하지 않나)

왜 있냐?

ex1)컴퓨터 >> 데스크탑, 노트북,태블릿 등등 >> 모델에 따라 또 기능이 달리 작동할 가능성이 존재

ex2)일반 스마트폰, 폴드 폰의 차이가 있고 그러한 기능들의 차이를 두기 위해 추상 메소드를 만들었다고 보면 된다.
(전원을 킬때 일반 스마트폰은 hold 버튼을 눌러 킨다. 근데 폴드 폰은 접힌 폰을 피기만 하면 전원이 켜진다.)

이를 관리 하기 위해 추상 메소드를 만든 것이다.

템플릿 메소드

시나리오대로 호출할 메소드들을 묶어놓은 메소드를 템플릿 메소드라고 한다.(재정의 불가능)

컴퓨터 전부

OS가 다 다름
OS? Operating System

운영체제를 이야기 한다.
사용자가 컴퓨터를 편하게 사용하게 하기 위한 소프트웨어
원래 예전에는 파일시스템을 cmd로 했다가 요즘은 OS의 GUI로만 파일시스템을 다룰 수 있다.(드래그 기능 등등 )

linux인가 window인가 macOs인가 전부 다르기에 이를 기능으로 구현하기 위해서는 추상 메소드가 필요하다.



interface:
다른 개발자가 해당 소스 코드에 접근할때 추가하기 쉽게 만들어놓은 틀의 요약?같은 것(호환성을 위해)
각자 개발하는 방식(변수선언 네이밍,메소드 선언,네이밍) 각각 다를 것인데 이를 딱 정의 해놓은 것이
인터페이스이다.


리팩토링의 고생을 줄이려하는 의도를 가지고 있음




---------------------

인터페이스의 구성요소(****암기)

상수

추상메소드

디폴트메소드

정적 메소드(static)

private메소드(디폴트 메소드에만 사용가능..)

정적 private 메소드(디폴트 메소드에만 사용가능..)

---------------------

Algorithm

데이터를 빠르게 접근하기 위한 것에 관하여

Big O 표기법(시간 복잡도)***



자료구조

정렬 방식

선택정렬
삽입정렬
퀵 정렬
버블 정렬


선형
ArrayList,LinkedList, Vector
Stack(LIFO), Queue(FIFO), Dequeue(Stack+Queue)
비선형
Tree,Graph 

Object Class

equals();
toString();
clone();

오버라이딩해서 씀

hash
Set, Table

key, value 쌍으로 저장하는 방식

key값을 인덱스로 자료 저장하고 값을 찾는 형태



인터페이스
inteface == 규약,프로토콜(호환성 관련)

빼도 기능 상 문제는 없음 단지 호환성을 위해 존재하는 것

String 클래스

변수처럼 사용되는 클래스










질문거리
instanceof, return, new, this, super, out:, break; 명칭이 뭐냐, 그냥 구문이라고 하나?

소프트웨어 개발 용어
Object Oriented Programming:객체 지향 프로그래밍

-----------
객체 지향 설계 SOLID 규칙
객체 지향 설계 Solid 규칙(해당 원칙들의 앞 글자만 따와서 SOLID 규칙이라고 한다.)
SRP(Single responsibility principle)
한 클래스는 하나의 책임만 가져야 한다.
OCP(Open/closed principle)
소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
LSP(Liskov substitution principle)
프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.” 계약에 의한 설계를 참고하라.
ISP(Interface segregation principle)
특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
DIP(Dependency inversion principle)
프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.”[4] 의존성 주입은 이 원칙을 따르는 방법 중 하나다.
-----------

DAO(Data Access Object)
데이터베이스의 데이터에 접근하기 위해 생성하는 객체
DTO(Data Transfer Object)
계층 간 데이터 교환을 하기 위해 사용하는 객체



다형성
하나의 객체로 여러 자료형을 가지게 하는 기능(부모 클래스든, 인터페이스든)

추상 클래스
추상 메소드를 포함하고 있는 클래스

하나라도 포함만 하고 있으면 된다.구현되어있는 메소드도 있고 구현 되어 있지 않은 메소드(추상 메소드)도 있다.

인터페이스


용어

다형성(polymorphism): 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미

재사용성(Reusability): 기존 시스템에 추가적인 기능을 덧붙이거나 수정하여, 기존 시스템을 그대로 사용할 수 있는 능력

리팩토링(Refactoring): 이미 작성한 소스코드에서 구현된 일련의 행위들을 변경없이,  
코드의 가독성과 유지보수성을 높이기 위해 내부구조를 변경

가상 메소드: 객체에서 메소드 호출시에 해당 객체가 어떤 클래스 기반으로 만들어졌는가에 따라 메소드 호출을 달리하는 것.

예약어: 컴퓨터 프로그래밍 언어에서 이미 문법적인 용도로 사용되고 있기 때문에 식별자로 사용할 수 없는 단어

