문자열에 원하는 문자를 제거 후 숫자로 형변환하여 합산 값 출력하기(study11_1.StringTest.java)

1.String 클래스의 split 메소드

1-1.문자열을 먼저 문자배열을 만들어서 변수에 따로 초기화해둠

1-2.이제 그 변수를 split 함수를 이용하여 원하는 문자를 제거함.

1-3.for문을 돌리며 Wrapper 클래스를 이용하여 숫자내용의 문자열을 형변환하면서 더 함

1-4.합산 값 출력

2.StringTokenizer 객체 활용

2-1.StringTokenizer 객체를 생성과 동시에 원하는 문자를 제거.

2-2 while문을 이용하여 조건문에는 hasMoreTokens
(다음 포인터에 요소가 있는지 boolean값으로 리턴하는 함수)으로 돌리면서
형변환 하면서 더 함.(즉, 다음 요소가 없을때까지 반복문을 돌린다는 소리다.)




***Constant pool과 Static memory는 다른 공간으로 봐야한다!




요구사항
기회 10 번








DB연동 원리
1.먼저 connect객체로 db와 연결이 원활하게 되는지 확인(예외처리 SQLException)
+)SQLException은 db연결상태때문에 일어나지만, sql문이 틀렸을 시에도 일어난다.

2.connect 객체에서 state 객체를 리턴하여 저장
sql문을 원활하게 기입할 수 있을 시 초기화 가능

3.sql문 관련 메소드로 sql문 기입
executeQuery(sql); //sql문을 기입하고 리턴할 값이 필요할 시에 사용하는 메소드 (select)
executeUpdate(); //기입하고 리턴할 값이 없을 시에 사용 즉 데이터처리만 할때 사용하는 메소드(delete, insert,update)




1.Wrapper클래스 사용한 형변환
2.% 연산자 활용문제
3.charAt()메소드 활용문제
4.replaceAll()메소드 활용문제
5.정렬 알고리즘(증감연산자 2개 활용) 시간 복잡도 O(n)


+)6.알고리즘 활용문제(배열 안에 있는 소수 색출하기) 시간 복잡도 O(n^2)


숫자야구게임 구현 끄읕!(수업 시간 안에 혼자 구현 완료인줄 알았으나 룰 숙지 미숙으로 미구현..)
2023.02.10 수다떨면서 20:20 구현완료!

for문 응용, 형변환 내용 응용, 입력 객체 활용, 무한루프 활용






+) 추가 공부

1.알고리즘 분야

시간 복잡도(출력 속도에 중점을 둔 척도) vs 공간 복잡도(메모리 공간 효율에 중점을 둔 척도)
이 둘을 잘 버무려야 보다 성능 좋은 프로그램을 짤 수 있다.

ex)
재귀함수 vs for문

for문  시간복잡도
O(n)

재귀 함수  시간복잡도
O(2^n)


2.github 분야(따로 공부하기)

branch
각자의 작업 공간 개념

log
log 확인하는 개념 

clone 
github 파일 단위 개념

pull
github에 있는 코드 가져오기 개념

add
본인 디렉터리에 추가하여 코드를 올리는 개념
git add -코드이름

commit
본인 디렉터리의 코드들을 서버에 올라갈 때 주석을 같이 개념
git commit -m "코드 수정사항 내용"

push
서버에 올리기전 마무리 작업 개념
git push



merge
다른 사람이 짠 코드와 합치는 작업 개념

root directory
linux의 루트와 유사

이해
비유로 말하자면 root directory를 나무로 보고 branch를 열매로 본다. 열매는 각자 
팀 구성에 따라 다르겠지만 능력에 따라 기능 단위로 될 수도 있고 어플 하나 통째로도 될 수도 있다.

github 동작 과정
팀을 이루어 프로젝트를 할 시에 각자의 branch에서 코딩을 한 후 add, commit, push를 이행하고,
각자가 짠 코드를 merge해준다.(merge는 일주일에 한번꼴로 하는게 좋음) 그 다음에 root directory에 올린다.


3.코드 안의 comment vs annotation
둘 다 주석을 의미하나,
comment는 기능을 안하는 주석을 이야기하지만, annotation은 기능을 하는 주석을 이야기한다.

annotation

@Override 메소드를 오버라이드하겠다는 의미로 메소드의 선언 앞에 붙인다.

@Deprecated 메소드를 사용하지 말라는 것을 명시하는 annotation 

@SupperessWarnings 컴파일러의 경고를 잡아내지 않도록할때 쓰는 annotation

@SafeVarargs 제네릭 같은 가변인자 매개변수를 사용할때 경고를 무시하는 annotation

@FunctionalInterface 자바에서 람다 메소드를 위해 인터페이스를 지정할때 쓰는 annotation

람다 메소드 : 개발자의 편의를 위해 기존에 쓰던 명령문을 더 짧게 쓰는 메소드로 알고 있다.

annotation은 메소드처럼 본인이 정의할 수 있다.

Generic(제네릭) :사용할 데이터 타입을 외부에서 지정하는 기법. 자료형은 E로 표기한다.

Java Collection 

Framework:프레임워크는 어떠한 목적을 달성하기 위해 복잡하게 얽혀있는 문제를 해결하기 위한 구조

Collection Freamwork:데이터를 저장하는 자료 구조와 데이터를 처리하는 알고리즘

List Interface: 중복되는 데이터들을 저장해야 할 때, 배열에 들어간 순서를 유지하고 싶을 때 사용한다. (중복 o, 순서 o)

Set Interface: 순서가 필요 없고, set에 저장될 데이터가 중복이 되면 안 될 때 사용한다. (중복 x, 순서 x)

Map Interface: 데이터를 저장할 때, key와 value 쌍으로 저장하고 싶을 때, 그리고, key를 중복 저장하고 싶지 않을 때 사용한다. (key 중복 x, value 중복 o, 순서 x)


javaScript
scriptlet? jsp페이지에서 자바 코드를 실행할 때, 사용되는 코드의 블록을 말한다.

1) <%! ... %> (선언문) : 멤버 변수나 메소드 선언
2) <% ... %> (스크립틀릿) : 자바로직 코드를 작성하는데 사용
3) <%= ... %> (표현식) : 변수, 계산식, 메소드 호출 결과를 문자열 형태로 출력
4) <%@ ... %> (지시문) : 페이지에 대한 정보 설정


자바: 3~4주 잘하면 1달 반정도 더 할 수 있음







﻿



﻿

