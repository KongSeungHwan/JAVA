함수의 형태 종류!

함수 접두어 ex) ⓐComsumer 에서 ⓐ자리에 붙는 단어들

(+기본형타입 접두어) 파라미터 타입이나 리턴 값 타입 지정시 사용!

Bi 파라미터가 2개라는 의미(Supplier는 해당x 파라미터가 없으니까)


Consumer

파라미터는 있지만 출력값이 없는 형태의 함수

accept() 오버라이딩



Supplier 

파라미터는 없지만 출력값이 있는 형태의 함수

get() 오버라이딩



Function

파라미터, 출력 값이 있음.

apply() 오버라이딩



Operator         (extends Function)

파라미터 리턴 값 둘 다 존재하나 두 가지의 타입은 같음

Predicate

파라미터, 리턴 값이 boolean 자료형인 함수



+)Reference of Method(즉 메소드의 참조)

** ::
구현 함수와 실행문에 있는 함수의 파라미터가 단 1개일때 사용가능한 연산자
(인터페이스) 변수명 = 실행문의 메소드의 클래스::실행문의 메소드명;
가능
자료형, 순서가 동일하다면? 가능!(파라미터와 리턴 값이 같다면!)



Stream 연산

기본형 관련 스트림
range() <<파라미터 2개 파라미터 1 이상 파라미터 2 이하의 수들 출력 
Double은 x(실수 범위의 숫자면 무수히 많다 불가)
random 객체의 doubles 함수 2개일경우 (처음 끝값 하지만 숫자는 단 한개)
doubles 함수(오버로딩) 3개면 (찾을 숫자 개수, 최소값,최대값) 이런식임


IntStream

LongStream

DoubleStream

문자열.chars() 해서 int로 뽑으면 그냥 아스키코드 값이 나옴



정규표현식
Regular Expressions


대부분의 플랫폼에서 사용하는 표현식

pattern

match

meta


+)
파라미터 제한 두지 않고 계속 주입하는 법
( 자료형1 변수명,자료형2... more) 
단, 단일 자료형만 가능


중간 연산 알아둘 것들

peek() 중간연산에서 foreach 기능이 필요할 시 사용하는 메소드

skip(long),limit(long) >>리턴 값의 개수를 건너뛰거나 제한하는 기능의 메소드

sorted() 기본 정렬 오름차순

sorted(Comparator<비교 자료형>or 역순(Comparator.reverseOrder()))

최종연산

reduce()
약간 피보나치 같이 연산하면서 결과 값을 저장하면서 진행

count()
연산한 결과 값의 개수를 합산하여 출력

sum()
각 연산 결과 값(숫자 값)을 합산하여 출력

average()

ifPresent() 
연산 리턴 값이 있다면 실행, 존재하지 않는 다면 실행x

parallel()
병렬처리 시에 사용하는 최종연산
int[] arr = {1,2,3,4,5};
Arrays.stream(arr).parallel().reduce((x,y)->x-y).ifPresent(System.out::println);
1-2 2-3 3-4 4-5 를 모두 합산한 값이 나옴

map 파라미터로 오는 인자가 초기화할 변수와 자료형이 같으면 된다.


mapToInt()


String
"" >>char[]={};

stream >> null (NullPointerException이 많이 일어난다고 하여! null값은 포함시키지 않는 것이 좋다고 한다!)