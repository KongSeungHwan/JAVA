Frond end(jsp, css 등) + Back end(DBA, API 등)=  Full stack

human compiler computer

logic  Algorithm

1.기본용어
2.문제 해결 능력 
3.인터넷 복사 코드 수정법



개발자 코드 작성
컴파일러(interpreter)에 올라감?(코드 문법, 오류 확인)
메인메모리에 올라감
실행


오픈소스
무료로 누구나 사용 가능하게 하는 자원
Naver Open API 
JSON 방식으로 받아봄..

JDK(자바 개발 도구),JRE(Java Runtime Environment), JVM(Java Virtual Machine,자바 가상 머신)

내가 필요한 기능이 있는 버전을 받자

프로젝트 시 Java EE를 활용한다고 함


개발 툴 설치(Eclipse)
1.java 설치
17이 지원 기간이 길기에 17버전으로 설치


2.자바 설치 확인
cmd에서 
javac -version
java - version 입력
해당 버전이 뜬다면 설치된것이다.

3. 환경 변수(참고 https://coding-factory.tistory.com/838)

3-1.시스템 환경 변수 편집 들어감

3-2.고급 탭에서 환경변수로 들어감

3-3.새로운 시스템 변수 작성
 (변수1) 이름 영문으로 아무거나 입력
변수 값은 jdk 설치경로를 긁어옴

3-4 다시 새로운 시스템 변수 작성

동일하게 임의의 이름으로 작성
변수 값은
%(변수1)%\lib
lib << 라이브러리

새로운 버전이 나오면
구버전 지우지 않고
%(변수 1)%((\~~))  ((~~ ))부분 하위 경로 변경

3-5. 시스템 변수 중 Path 변수에 들어가서 변수 작성
%(변수1)%\lib로 새로만들고 맨위로 옮김


4.eclipse 설치(IDE 설치)

Eclipse 홈페이지에서 
다운로드>> 다운로드 끝
설치파일 실행 
맨위의 것만 설치하면 되긴하는데 
web 프로그래밍도 할것이라 3번쨰것 설치

5.STS(Spring Tool Suite)
나중에 스프링 프레임워크를 배울때 설치한다고 함.



설치후 Hello World  출력(국룰)
public static void main(String []args){
System.out.println("HelloWorld");
}


프로그래밍 언어
컴퓨터 시스템을 구동시키는 소프트웨어를 작성하기 위한 형식언어

*고급 언어일 수록 사람이 사용하는 언어에 가깝다.
SQL<<DataBase
Python(겁나쉬움), Java(기초)
C(기초)
Assembly Language
기계어?

아이디어>> 프로그램 >> 인터프리터(컴파일러) >> 기계어 프로그램

java는 close 명령어로 자원 반납을 해야함.


메모리 사용

method
클래스 정보
클래스 변수


memory 영역

heap memory

stack memory

두 영역이 있다.

메모리 공간에는 음수값이 -로 표기가 불가 고로 보수를 사용하여 음수 값을 표기






JAVA

자바 코드는 끝에 ; 세미콜론을 붙이는 것이 원칙

코딩시 들여 쓰기 tab 필수 또는 Ctrl+A ,Ctrl+I 로 들여쓰기 가능

괄호 범위의 가독성을 위해 들여쓰기 씀
파이썬은 들여쓰기여부에 따라 문법이 맞냐 틀리냐 갈린다.

데이터

데이터의 단위

진수(10,2,16)

1Byte =8Bits
kilo >> 1024 bytes
mega >> kilo*1024
giga >> mega*1024
tera >> giga*1024
...

IPv4 8
IPv6 16

1의 보수
2의 보수
데베 영역에서 고객관리 수를 늘려야하는 작업이므로 중요한 내용임

자바 진수 표현


변수(Variable)

(자료형) (변수명); //<<선언 방식
(변수명) = (값); // << 값을 해당 주소에 기입

(자료형) (변수명1) =(값1),(변수명2) =(값2) 용법도 존재


ex)
int a;(정수형)
a =3;
String b;(문자열) 
b = "공승환";

나중에 해당 값을 호출할 때 쓰는 것이 변수이다.

int는 +-2의 15제곱 까지 가능


변수명 명명규칙

1.%,$ 등 특수문자 불가능
int %%; (x)

2.변수명은 숫자 시작 불가
int 12insert;(x)

3.예약어는 변수명으로 사용할 수 없다.(키워드를 변수명으로 사용 불가)
ex) int int, int double;(x)

4.대소문자 구분

ex)

int a; int A;
a와 A는 다른 주소에 저장된 값.

SQL은 대소문자 구분 안함
SELECT 부서; , select 부서; 둘 다 같음

Camel 방식 표기법(문자가 시작하는 글자에 대문자로 표기하는 방식) 
보통은 카멜 표기법을 사용한다고 함


- 헝가리안 표기법(hungarian case)
- 파스칼 표기법(pascal case)
- 언더바 표기법(snake_case)


ex)
className

자료형


기본형


논리형
true false로 구분, 1,0으로도 가능

문자형
char (' '사용)

문자열
String (" "사용)

(문자열은 공백또한 한 글자로 취급한다.)

정수형
byte, short, int, long
**일반적으로 변수 10진법으로 정의 하면 int 타입이고 long 타입 변수 선언시 뒤에 L을 붙여줘야함

실수형
double, float
실수형은 기본적으로 실수로 변수를 정의하면 double 형이고 float으로 정의할때 뒤에 f 또는 F를 표기해야 한다. 

표현값의 범위에 맞추지 못하면 쓰레기 값이 나오게 되거나(c언어) type miss match 가뜸.(자바 영역)


참조형
class type 
interface type



상수와 리터럴(constant, literal)

선언 시에 하위 범위에서 불변의 값

상수: final, 고정값


ex) 
final int a = 1;(상수 선언 예시)


리터럴: 실제 값('A',1,4)
리터럴에 해당하는 값은 constant pool이라는 메모리에 저장함.

기본형은 반드시 사용 전에 선언 되어야 한다.

선언과 동시에 값을 할당 가능

int a =1;

int a // 선언함
a= 1; //값을 할당

컴퓨터 범위에서 표현할 수 없는 값을 null값이라고 한다.

선언한 이상, 자료형의 길이는 불변이다.

null값을 가질 수 없다.



조건문은 boolean 즉 논리형으로 리턴되어야함.

public static void main(String[] args) << 자바가 시작되는 시작점

여기에 올라와야 메인메모리에 올라와 실행


// 한줄 제외
		
주석

코드마다 다 변수명이니 메소드명이니 다 다르기 때문에 설명을 써줘야 보는 사람이 편함.

개발자 이외의 사람이 볼때 참고하라 쓰는 것이 주석
/* 코멘트 하기 제외 시킴


*/



유니코드
유니코드(Unicode)는 전 세계의 모든 문자를 다루도록 설계된 표준 문자 전산 처리 방식

묵시적 형변환
작은 자료형에서 큰자료형으로 형변환은 자동으로 이루어짐
(데이터가 날아가지 않으므로)
int >>long (o)

long >> int (x)
long a = 99999999999;
>> (int)a로 선언 x

명시적 형변환
float fNum =3.14;
int iNum2 =(int)fNum; (int)(변수이름) <<int로 강제 캐스팅
iNum2에 3만 들어감

진수를 변수에 선언

int num1 = 0B1111111; << 0B뒤의 2진법으로 변수 선언

int num2 = 01111111; << 0뒤의 8진법으로 변수 선언

int num3 = 0x1111111; << 0x뒤의 16진법으로 변수 선언

범위 바깥 값을 입력하면 
뒤로 돌아감

byte byteData = -128;
byteData (byte)-129






연산자

계산해야하는 대상에 따라 

x항 연산자라고 명명한다.
++a >> 단항 연산자
a+b >> 이항 연산자










산술 연산자

더하기 +
int a =1;
int b =2 ;
System.out.println(a+b);
결과값
3


빼기 -
int a =2;
int b =1;
System.out.println(a-b);
결과값
1

곱하기 *
int a =2;
int b =3;
System.out.println(a*b);
결과값
6

나누기  /(몫),%(나머지)

int a =3;
int b =2;
System.out.println(a/b);
System.out.println(a%b);
결과값
1
1


대입 연산자

=


int a =3;
int b =2;
a=b
System.out.println(a);
결과값
2

자바에서는 같다는 표현이 == 이다. =표현이면 대입연산자이다. 혼동x

+=
(a+=b )==(a=a+b)
이다.



증감연산자
++x
x++
--x
x--

int x =1;
System.out.println(x++);
결과 값
1

//출력 되고 난다음 x ==2 이다.





!= 다르다는 표현
== 같다는 표현



비교 연산자

a==b a,b가 같다
a!=b a,b가 다르다
a<=b a는 b보다 작거나 같다
a>=b a는 b보다 크거나 같다
a<b a는 b보다 작다
a>b a는 b보다 크다



논리 연산자(a,b가 둘다 논리형일때)
if의 조건문이나 while의 조건문에서 많이 사용됨.

a&&b >> and
a와 b가 둘 다 참이어야 참인 값 true
나머지는 false

a||b >> or
a 또는 b 값이 참이면 참
즉 둘 중 하나만 참이어도 참이다

a,b 둘 다 거짓이어야 거짓인 연산자

! >> not
붙이면 반대 값이 되는 연산자

boolean a = true;
 System.out.println(!a);

결과 값 
false
**앞의 a 조건으로 최종 논리형 값을 판단 가능할 때 뒤의 조건 b가 오류인지 여부와 관계없이 넘어가는 현상이 있다.
a = 1<5;
b = c>d;
(c,d 선언x c,d에는 쓰레기 값이 들어가게 됨.)

a||b >> 참일 수 있다.

비트 연산자

2진수 한정 연산자

7을 비트로 표현 >> 111

5를 비트로 표현 >> 101

4를 비트로 표현 >> 100

7&5 비트를  and 연산
101 >> 즉 10진수로 표현하면 5가 나오게 된다.

7|5 or 연산
111 >>7이 나오게 된다.

7^5 xor 연산
101 >> 5가 나오게 된다.

~5 not 연산

010 >> 즉 2가 나오게 된다.

5<<2 shift 연산
10100 >> 즉 20 값이 나오게 된다.

4>>2
1 >> 즉 1값으로 나오게 된다.



삼항 연산자


A?B:C(A,B는 조건문)

true 면 B
false 면 C 

값으로 리턴 된다.(꼭 논리형이 아니어도 적용 가능)




연산자 우선순위(표 참고)






제어문

조건문
if~, else if, ~ else

반복문
for, while, do~while

if 문

if(논리형){

논리형 값이 true 일때 실행
}
else{
논리형 값이 false 일때 실행
}

else if 문

if(범위1){

  	기입한 값이 범위1 범위에 있을때 실행
}
else if(범위2){
	기입한 값이 범위2 범위에 있을때 실행
}
else{
	기입한 값이 두 범위에 포함되지 않을 때 실행

}

switch~ case 문

switch(값){
case (값1) :
값이 값1에 해당하는 경우 실행
break;

case (값2):
값이 값2에 해당하는 경우 실행
break;

case (값3):
값이 값3에 해당하는 경우 실행
break;

default:
값1,2,3 어느 값에도 해당되지 않는 경우 실행

}

**break 문을 안 걸어 주면 모든 case 안에 있는 명령문을 실행하게 된다.
값에 따라 시작점이 달라진다는 것
break문이 아예 없을 경우
switch(값)의 값이 값2일 경우 값2, 값3 범위의 명령어가 실행됨.


default는 if절의 else문과 같다.
어느 조건에도 포함되지 않는 경우 실행됨.

if문 
조건의 분기를 통한 처리에 유리

switch~case 문
조건의 값이 다양한 경우 사용

+)
LocalDate 객체 

now() <<생성자 메소드?

LocalDate (객체 이름) = new LocalDate.now();



반복문(시간 복잡도가 O(n))


for문 while문 do~ while문

for문

for(초기화식;조건식;증감식){
	조건식이 참이면 실행, 거짓이 될때까지 계속 실행한다.
}

신규 for문(배열 활용)

for(변수: 배열 이름){

배열 안의 요소의 개수 만큼 실행된다.

}


while문
while(조건식){
	조건식이 참이면 실행, 거짓이 될 때까지 계속 실행한다.

(if와 break문을 활용하여 반복문을 멈춤)
 
(증감식)
}


do~while문

do(
조건식과 상관없이 1번 실행 후 조건식이 거짓일 때까지 실행


(if와 break문을 활용하여 반복문을 멈춤)
(증감식)

)while(조건식)


조건식이 계속 참이 될 경우 무한루프를 돌게 된다.(break문으로 무한루프를 멈춰야 함.)



break; ,continue;

반복문을 멈추고 바로 바깥으로 나갈때, break;
continue 문 다음의 명령어를 스킵하고 다음 횟수로 넘어갈 때, continue;




이중 반복문(시간 복잡도가 O(n의 제곱))

이중 반복문은 break;문을 두번 걸어야 두 반복문이 멈춤







용어
오픈소스(Open source): 오픈소스란 원래 오픈소스 소프트웨어(Open Source Software, OSS)를 뜻하는 
용어, 오픈소스 소프트웨어는 공개적으로 액세스할 수 있게 설계되어 누구나 자유롭게 
확인, 수정, 배포할 수 있는 코드
컴파일러(Complier): 개발자의 코드의 문법 오류를 잡아주는 것
IDE: 통합 개발 도구
JDK: 자바 개발 도구
JRE: 자바 실행 환경
JVM: 자바 가상 머신
환경 변수:프로세스가 컴퓨터에서 동작하는 방식에 영향을 미치는, 동적인 값들의 모임
STS(Spring Tool Suite):Spring Framework 를 지원하는 IDE 개발 툴중 하나로
 Java 기반의 웹 서비스 어플리케이션 구축을 쉽게 할 수 있도록 도와주는 개발 도구
Spring Framework: 애플리케이션을 개발하기 위한 기능을 종합적으로 제공하는 솔루션
프로그래밍 언어(Programming Language):컴퓨터 시스템을 구동시키는 소프트웨어를 작성하기 위한 형식언어
디버깅(debugging):모든 소프트웨어에서 소스 코드의 오류 또는 버그를 찾아서 수정하는 과정
로깅(Logging):어떤 소프트웨어가 실행될 때 발생하는 이벤트를 추적하는 수단(로그를 추적하여 오류를 수정하는 것)
리터럴(literal): 데이터 값 그 자체 ex) int a =1; >> 여기서 1을 의미
null값: 비어있는 값,컴퓨터 범위에서 표현할 수 없는 값을 null값이라고 함.
perspective: Perspectives(퍼스펙티브)는 view 들을 모아둔 레이아웃
아스키 코드:1963년 미국 ANSI에서 표준화한 정보교환용 7비트 부호체계


질문거리
1.상수는 선언 한것만으로도 전역변수가 될 수 있는가? x

2.var 자료형으로 선언하면 자원 낭비가 되는가? 시간 복잡도가 얼마나 되는 건가?
일반 자료형으로 선언한 것과 그닥 차이 없음(약간 차이가 날 수는 있으나 뚜렷하게 나진 않는다.) 디버깅해봐야함

3.만일 조건문에 논리형이 아니고, 0이 아닌 값이 들어가면 무조건 true 값이 되는가?
자바 한정에서는 무조건 true, false 값만 들어가므로 숫자가 들어가는 것은 불가

4.shift 연산시 만일 1이어도 넘어가게 되면 버림하는가?
처리 방식에 따라 값이 다르다.(중요x)

5.if, else if 의 조건 절의 범위에 겹치는 값이 나온다면 둘다 출력 되는가? 아니면 if문만 출력되는가? 
제일 먼저 있는 if(조건문)에 해당하는 값이 나옴 올바른 값이 나올 수 있지만, 코드 상 깔끔하지 못함

6.LocalDate 객체의 메소드 중 DayOfWeek 객체를 리턴하는 getDayOfWeek() 메소드는
toString()이라는 메소드를 가지고 있지 않다. 오버라이딩한 것이 아닌  모든 최상위 객체인 Object의 메소드를 호출한 것이다.
toString() >> 객체를 텍스트로 표현한 문자열을 리턴하는 메소드 Object의 메소드

7.**만일 반복문 안에 switch case문을 사용한다면 break문을 어떻게 써야하는가?

ex)무한루프 while문
while(true){
	switch(값){
 		case 값1:~~~~(명령어)
		break; 
	}
break;
}


//break를 걸게되면 반복문도 멈추는가? 아니면 break문을 2번 걸어야 하는가?o
