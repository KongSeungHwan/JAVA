개발 시에 반복문은 되도록 삼가
시간 복잡도도 높고(출력시간이 오래걸림) 개발자들이 머리를 써야하므로


제어문 괄호 안에 입력시에 한줄만으로 가능하면 중괄호는 안써도 된다.(for,if while)

클래스의 필드나 메소드를 호출 시에 String args라는 파라미터로 기입 된 후에 메인메모리에 적재된다.
public static void main(String args) args >> arguments




**out: ~out; 명령어
다중 반복문또는 반복문에서 루프를 멈출 시, 굳이 if문으로break 문으로 걸어나오지 않아도 되는 장점이 있다.

출력문
① print() : 괄호 안의 내용을 출력만 한다.
② println() : 괄호 안의 내용을 출력하고 줄을 바꾼다.
③ printf() : 서식을 지정하고(%d(int),%s(String),%f(double, float) 등), 괄호 안의 내용을 출력한다.

이스케이프 문
\\ /출력
\n 줄바꿈
\r 해당 줄의 맨 앞으로 커서 이동
\t 탭 키만큼 커서 이동
\b 바로 앞문자 지움? 이상한 문자 생김 >>
\f 프린터에서 강제적으로 다음 페이지 넘김 이상한 문자 생김 >> 
\'   '<<표기
\"  "<< 표기


모든 객체는 Object객체(최상위 객체)의 자식 객체다.





객체와 클래스




클래스(객체를 만들어내는 표본)


필드(객체의 속성)or 멤버변수


생성자(객체를 만들때 필요한 메소드)

디폴트 생성자
class Car{
Car(){} <<디폴트 생성자
}
 


메소드(객체의 행위)
void 반환 값은 없음
대신 메소드 타입에 따라 리턴되는 값이 다름

메소드 용법
ex)
void action(){

리턴 x

}//void는 리턴 값이 없음

int action1(){



return (int값) <<필수로 써줘야 함
}//앞 쪽에 자료형을 쓰면 해당 자료형에 맞게 리턴값이 나와야 한다.


POP(절차지향)
상향식

OOP(객체지향)
하향식 

client클래스 >> Vip client클래스
상위               하위



접근 제어자

private
같은 클래스 내부를 제외하고 전 영역에서 접근 불가
public
모든 영역에서 접근가능
default
같은 패키지 내에서만 접근가능
protected
같은 패키지내와 자식 클래스에서만 접근가능 
 class는 public default 두 가지만 사용가능
4개 다 변수/메소드 사용가능

class B extends A

클래스B는 클래스A의 자식 클래스(하위 클래스)다.
클래스A는 클래스B의 부모 클래스(상위 클래스)다.


(자료형) (변수명) = (리터럴);






static 변수

전역변수
(객체 생성 없이 접근 사용 가능한 변수)
본래  변수는 스택 메모리에 들어가나 static은 별도의 메모리 공간에 저장된다.

static이 따로 쓰는 메모리 공간에 저장이 되므로 어디에서 수정하든 간에 
식별하는 이름이 동일하다면 값은 바뀐다.

메인메소드도 별도의 static 영역에서 작용하는건가


지역변수는 가까운 순으로 인식

int i =5;
if(조건식){

if문 안에서는 i==1
	 i=1;
}

//바깥 영역에서는 i==5

static 변수 예외 상황


전역 변수 vs static 변수
라이프 타임은 같으나 프로그램이 시작될때부터 프로그램이 죽을때까지로 동일하나
static은 초기화 하지 않은 상태에서 사용을 안할 시 메모리에 아예 적재가 되질 않고
전역변수는 사용을 하지 않더라도 메모리에 적재된다.

for(i=0;i<5;i++){
a(); // << i변수를 static으로 정의하는 메소드
System.out.println(i);
}
무한루프o






오버로딩
한 클래스 내에서 메소드를 이름이 같더라도 매개변수의 자료형과 개수에 따라 달리 기능하는 것.
매개변수의 개수와 자료형과 순서에 따른 구분가능

오버라이딩
부모 클래스가 정의한 메소드를 자식 클래스에서 재정의할 수 있는 기능


this 예약어
this가 포함된 객체 그 자체를 말함
ex)
this.a();
//this가 있는 객체의 a() 메소드를 호출하는 것


객체의 캡슐화를 위해 private 접근 제어자와 getter,setter 메소드를 이용하는 것이 좋음.


nullPointerException 
객체 자체가 없거나 값이 없는 예외










용어
OS(Operating System) :사용자가 컴퓨터를 쉽게 다룰 수 있게 해주는 인터페이스
옛날 컴퓨터는 cmd창으로 명령어를 쳐서 파일을 수정/변경 할 수 있었으나, 요즘에는 os를 통해 파일을 변경 가능하다.

Linux: 오픈소스 운영 체제, 이는 원래 1991년에 Linus Torvalds가 취미 삼아 만든 것으로 알려져 있음

Instance: 일반적으로 실행 중인 임의의 프로세스, 클래스의 현재 생성된 오브젝트를 가리킨다.

MainMemory : 중앙 처리 장치(CPU)가 처리되거나 특정 시간에 처리되거나 처리될 프로그램 
모두 일시적으로 저장되는 컴퓨터의 메모리, 메인 메모리는 아래의 힙, 스택 영역으로 나뉨

heap memory : 자바 프로그램이 실행되면서 동적으로 생성된 객체( new 연산자로 생성된 객체 또는 인스턴스)가 저장되는 공간

stack memory : 함수의 호출과 관계되는 지역 변수(LocalVariable)와 매개변수(Parameter)가 저장되는 영역

생성자(constructor):자바에서는 객체의 생성과 동시에 인스턴스 변수를 원하는 값으로
 초기화할 수 있는 생성자(constructor)라는 메소드

오버로딩(overloading):같은 이름의 메서드 여러개를 가지면서 매개변수의 유형과 개수가 다르도록 하는 기능
한 클래스 내
오버라이딩(Overriding):상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의해서 사용할 수 있는 기능
(부모 클래스에서 정의한 메소드를 자식 클래스에서 재정의해서 사용 하는 기술)

프로그램(program): 어떤 작업을 위해 실행할 수 있는 파일
프로세스(process): 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램
스레드(thread): 프로세스(process) 내에서 실제로 작업을 수행하는 주체
추상 클래스: 하나 이상의 추상 메소드를 포함하는 클래스를 가리켜 추상 클래스라고 한다. 