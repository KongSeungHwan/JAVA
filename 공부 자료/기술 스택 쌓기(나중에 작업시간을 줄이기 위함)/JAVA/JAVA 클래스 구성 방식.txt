자바로 프로젝트를 하려 클래스를 구성하려면 
기능단위로 만들어야한다.

프로젝트 스케일이 클 수록 복잡해질 수 있으므로
이런식으로 클래스를 구성하는 습관이 필요하다.


+)객체지향 설계 원칙(통상 앞글자만 따서 SOLID 규칙이라고 한다.)(정처기 내용 응용)

S	SRP	
단일 책임 원칙 (Single responsibility principle)
한 클래스는 하나의 책임만 가져야 한다.
O	OCP	
개방-폐쇄 원칙 (Open/closed principle)
“소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.”
L	LSP	
리스코프 치환 원칙 (Liskov substitution principle)
“프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.” 계약에 의한 설계를 참고하라.
I	ISP	
인터페이스 분리 원칙 (Interface segregation principle)
“특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.”[4]
D	DIP	
의존관계 역전 원칙 (Dependency inversion principle)
프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.”[4] 의존성 주입은 이 원칙을 따르는 방법 중 하나다.



기능단위 구현vs 모듈 단위 구현


+)모듈(module)이란 프로그램을 구성하는 구성 요소로, 관련된 데이터와 함수를 하나로 묶은 단위






클래스를 단일 기능 단위로 잡아야한다.(이 내용은 SOLID 규칙의 S에 해당)

내가 아는 정보

1.인스턴스 생성용 클래스
그냥 private(같은 클래스내 접근 가능)박아놓고
getter/setter 해놓으면 그것도 하나의 클래스로 되긴한다.


ex)
client.class 파일(객체 생성용 예시)
class Client{
	private String name;
	private String id;
	private String pw;

	public String getName(){
		return this.name;
	}
	public String getPw(){
		return this.pw;
	}
	public String getId(){
		return this.id;
	}
	public void setName(String name){
		this.name = name;	
	}
	public void setId(String id){
		this.id = id;	
	}
	public void setPw(String pw){
		this.pw = pw;	
	}
}


나머지 기능 단위로 쪼개는 법

ex) DB관련 클래스 구성
DAO(Data Access Object) 는 데이터베이스의 data에 접근하기 위한 객체
DTO(Data Transfer Object) 는 계층 간 데이터 교환을 하기 위해 사용하는 객체
VO(Value Object) 값 오브젝트로써 값






